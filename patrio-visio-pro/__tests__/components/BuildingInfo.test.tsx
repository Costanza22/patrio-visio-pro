import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import BuildingInfo from '../../components/BuildingInfo';

describe('BuildingInfo', () => {
  const mockBuilding = {
    id: '1',
    name: 'Casar√£o de Proc√≥pio Gomes',
    description: 'Casar√£o hist√≥rico do s√©culo XVIII',
    architecturalStyle: 'Colonial',
    constructionYear: '1750',
    historicalValue: 'Alto',
    currentUse: 'Patrim√¥nio hist√≥rico',
    architect: 'Arquitetura colonial tradicional',
    constructionMaterials: ['Pedra', 'Madeira', 'Tijolo'],
    historicalEvents: [
      'Constru√≠do no s√©culo XVIII',
      'Resid√™ncia de Proc√≥pio Gomes',
      'Tombado como patrim√¥nio hist√≥rico',
    ],
    location: 'Centro Hist√≥rico',
    coordinates: {
      latitude: -23.5505,
      longitude: -46.6333,
    },
  };

  const mockAIAnalysis = {
    labels: ['building', 'historic', 'colonial'],
    objects: ['house', 'mansion'],
    architecturalStyle: 'Colonial',
    buildingType: 'Casar√£o Hist√≥rico',
    estimatedYear: 1750,
    confidence: 95,
    description: 'üèõÔ∏è Casar√£o hist√≥rico detectado! Estilo arquitet√¥nico: Colonial.',
    isHistoricalBuilding: true,
    buildingCategory: 'historical',
    historicalValue: 'Alto',
    recommendations: [
      'Documente a fachada e detalhes arquitet√¥nicos',
      'Verifique se est√° listado como patrim√¥nio hist√≥rico',
      'Considere restaura√ß√£o preservando caracter√≠sticas originais',
    ],
    isOfflineAnalysis: true,
  };

  const mockLocation = {
    latitude: -23.5505,
    longitude: -46.6333,
    address: 'Rua das Flores, 123',
    city: 'S√£o Paulo',
    state: 'SP',
    country: 'Brasil',
    postalCode: '01234-567',
  };

  const mockOnClose = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('deve renderizar corretamente com todas as informa√ß√µes', () => {
    const { getByText, getByTestId } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={mockAIAnalysis}
        location={mockLocation}
      />
    );

    expect(getByText('Casar√£o de Proc√≥pio Gomes')).toBeTruthy();
    expect(getByText('üèõÔ∏è Casar√£o Hist√≥rico')).toBeTruthy();
    expect(getByText('ü§ñ An√°lise de IA')).toBeTruthy();
    expect(getByText('üì± An√°lise Offline')).toBeTruthy();
  });

  it('deve mostrar an√°lise de IA quando dispon√≠vel', () => {
    const { getByText } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={mockAIAnalysis}
        location={mockLocation}
      />
    );

    expect(getByText('ü§ñ An√°lise de IA')).toBeTruthy();
    expect(getByText('üì± An√°lise Offline')).toBeTruthy();
    expect(getByText('Funcionando sem internet - IA local inteligente')).toBeTruthy();
    expect(getByText('üèõÔ∏è Casar√£o Hist√≥rico')).toBeTruthy();
    expect(getByText('95%')).toBeTruthy();
  });

  it('deve mostrar an√°lise online quando aplic√°vel', () => {
    const onlineAnalysis = {
      ...mockAIAnalysis,
      isOfflineAnalysis: false,
    };

    const { getByText } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={onlineAnalysis}
        location={mockLocation}
      />
    );

    expect(getByText('üåê An√°lise Online')).toBeTruthy();
  });

  it('deve mostrar categoria correta para casar√£o hist√≥rico', () => {
    const { getByText } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={mockAIAnalysis}
        location={mockLocation}
      />
    );

    expect(getByText('üèõÔ∏è Casar√£o Hist√≥rico')).toBeTruthy();
  });

  it('deve mostrar categoria correta para edif√≠cio moderno', () => {
    const modernAnalysis = {
      ...mockAIAnalysis,
      buildingCategory: 'modern',
      isHistoricalBuilding: false,
      architecturalStyle: 'Moderno/Contempor√¢neo',
      buildingType: 'Edif√≠cio Moderno',
      historicalValue: 'Baixo',
    };

    const { getByText } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={modernAnalysis}
        location={mockLocation}
      />
    );

    expect(getByText('üè¢ Edif√≠cio Moderno')).toBeTruthy();
  });

  it('deve mostrar categoria correta para outros objetos', () => {
    const otherAnalysis = {
      ...mockAIAnalysis,
      buildingCategory: 'other',
      isHistoricalBuilding: false,
      architecturalStyle: 'N√£o aplic√°vel',
      buildingType: 'N√£o √© um edif√≠cio',
      historicalValue: 'N√£o aplic√°vel',
    };

    const { getByText } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={otherAnalysis}
        location={mockLocation}
      />
    );

    expect(getByText('üì¶ Outro Objeto')).toBeTruthy();
  });

  it('deve mostrar barra de confian√ßa corretamente', () => {
    const { getByText } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={mockAIAnalysis}
        location={mockLocation}
      />
    );

    expect(getByText('Confian√ßa da An√°lise:')).toBeTruthy();
    expect(getByText('95%')).toBeTruthy();
  });

  it('deve mostrar detalhes da an√°lise de IA', () => {
    const { getByText } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={mockAIAnalysis}
        location={mockLocation}
      />
    );

    expect(getByText('üèóÔ∏è Estilo:')).toBeTruthy();
    expect(getByText('Colonial')).toBeTruthy();
    expect(getByText('üèõÔ∏è Tipo:')).toBeTruthy();
    expect(getByText('Casar√£o Hist√≥rico')).toBeTruthy();
    expect(getByText('üìÖ Ano Estimado:')).toBeTruthy();
    expect(getByText('1750')).toBeTruthy();
    expect(getByText('‚≠ê Valor Hist√≥rico:')).toBeTruthy();
    expect(getByText('Alto')).toBeTruthy();
  });

  it('deve mostrar recomenda√ß√µes da IA', () => {
    const { getByText } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={mockAIAnalysis}
        location={mockLocation}
      />
    );

    expect(getByText('üí° Recomenda√ß√µes:')).toBeTruthy();
    expect(getByText('‚Ä¢ Documente a fachada e detalhes arquitet√¥nicos')).toBeTruthy();
    expect(getByText('‚Ä¢ Verifique se est√° listado como patrim√¥nio hist√≥rico')).toBeTruthy();
    expect(getByText('‚Ä¢ Considere restaura√ß√£o preservando caracter√≠sticas originais')).toBeTruthy();
  });

  it('deve mostrar informa√ß√µes do casar√£o', () => {
    const { getByText } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={mockAIAnalysis}
        location={mockLocation}
      />
    );

    expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
    expect(getByText('Casar√£o hist√≥rico do s√©culo XVIII')).toBeTruthy();
    expect(getByText('Colonial')).toBeTruthy();
    expect(getByText('1750')).toBeTruthy();
    expect(getByText('Alto')).toBeTruthy();
    expect(getByText('Patrim√¥nio hist√≥rico')).toBeTruthy();
    expect(getByText('Arquitetura colonial tradicional')).toBeTruthy();
  });

  it('deve mostrar materiais de constru√ß√£o quando dispon√≠veis', () => {
    const { getByText } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={mockAIAnalysis}
        location={mockLocation}
      />
    );

    expect(getByText('Materiais de Constru√ß√£o')).toBeTruthy();
    expect(getByText('‚Ä¢ Pedra')).toBeTruthy();
    expect(getByText('‚Ä¢ Madeira')).toBeTruthy();
    expect(getByText('‚Ä¢ Tijolo')).toBeTruthy();
  });

  it('deve mostrar eventos hist√≥ricos quando dispon√≠veis', () => {
    const { getByText } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={mockAIAnalysis}
        location={mockLocation}
      />
    );

    expect(getByText('Eventos Hist√≥ricos')).toBeTruthy();
    expect(getByText('‚Ä¢ Constru√≠do no s√©culo XVIII')).toBeTruthy();
    expect(getByText('‚Ä¢ Resid√™ncia de Proc√≥pio Gomes')).toBeTruthy();
    expect(getByText('‚Ä¢ Tombado como patrim√¥nio hist√≥rico')).toBeTruthy();
  });

  it('deve mostrar informa√ß√µes de localiza√ß√£o quando dispon√≠veis', () => {
    const { getByText } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={mockAIAnalysis}
        location={mockLocation}
      />
    );

    expect(getByText('Localiza√ß√£o')).toBeTruthy();
    expect(getByText('Centro Hist√≥rico')).toBeTruthy();
    expect(getByText('S√£o Paulo, SP')).toBeTruthy();
    expect(getByText('01234-567')).toBeTruthy();
  });

  it('deve n√£o mostrar se√ß√µes vazias', () => {
    const buildingWithoutOptional = {
      ...mockBuilding,
      constructionMaterials: undefined,
      historicalEvents: undefined,
    };

    const { queryByText } = render(
      <BuildingInfo
        building={buildingWithoutOptional}
        onClose={mockOnClose}
        aiAnalysis={mockAIAnalysis}
        location={mockLocation}
      />
    );

    expect(queryByText('Materiais de Constru√ß√£o')).toBeNull();
    expect(queryByText('Eventos Hist√≥ricos')).toBeNull();
  });

  it('deve chamar onClose quando bot√£o de fechar √© pressionado', () => {
    const { getByText } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={mockAIAnalysis}
        location={mockLocation}
      />
    );

    const closeButton = getByText('‚úï');
    fireEvent.press(closeButton);

    expect(mockOnClose).toHaveBeenCalledTimes(1);
  });

  it('deve mostrar badge de casar√£o reconhecido para edif√≠cios conhecidos', () => {
    const recognizedBuilding = {
      ...mockBuilding,
      name: 'Casar√£o de Proc√≥pio Gomes',
    };

    const { getByText } = render(
      <BuildingInfo
        building={recognizedBuilding}
        onClose={mockOnClose}
        aiAnalysis={mockAIAnalysis}
        location={mockLocation}
      />
    );

    expect(getByText('ü§ñ CASAR√ÉO RECONHECIDO!')).toBeTruthy();
    expect(getByText('Casar√£o de Proc√≥pio Gomes')).toBeTruthy();
  });

  it('deve lidar com an√°lise de IA sem recomenda√ß√µes', () => {
    const analysisWithoutRecommendations = {
      ...mockAIAnalysis,
      recommendations: [],
    };

    const { queryByText } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={analysisWithoutRecommendations}
        location={mockLocation}
      />
    );

    expect(queryByText('üí° Recomenda√ß√µes:')).toBeNull();
  });

  it('deve mostrar cores corretas para diferentes categorias', () => {
    const { getByText } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={mockAIAnalysis}
        location={mockLocation}
      />
    );

    // Verificar se as categorias s√£o exibidas com cores corretas
    expect(getByText('üèõÔ∏è Casar√£o Hist√≥rico')).toBeTruthy();
  });

  it('deve ser scroll√°vel para conte√∫do longo', () => {
    const { getByTestId } = render(
      <BuildingInfo
        building={mockBuilding}
        onClose={mockOnClose}
        aiAnalysis={mockAIAnalysis}
        location={mockLocation}
      />
    );

    const scrollView = getByTestId('building-info-scroll');
    expect(scrollView).toBeTruthy();
  });
});
