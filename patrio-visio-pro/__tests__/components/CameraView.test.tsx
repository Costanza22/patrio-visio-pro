import React from 'react';
import { render, fireEvent, waitFor } from '@testing-library/react-native';
import CameraView from '../../components/CameraView';
import { AIService } from '../../services/AIService';
import { LocationService } from '../../services/LocationService';

// Mock dos servi√ßos
jest.mock('../../services/AIService');
jest.mock('../../services/LocationService');

describe('CameraView', () => {
  const mockOnObjectDetected = jest.fn();
  const mockOnClose = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    
    // Mock padr√£o para AIService
    (AIService.analyzeImage as jest.Mock).mockResolvedValue({
      labels: ['building', 'historic'],
      objects: ['house'],
      architecturalStyle: 'Colonial',
      buildingType: 'Casar√£o Hist√≥rico',
      estimatedYear: 1750,
      confidence: 90,
      description: 'Casar√£o hist√≥rico detectado!',
      isHistoricalBuilding: true,
      buildingCategory: 'historical',
      historicalValue: 'Alto',
      recommendations: ['Documente a fachada'],
      isOfflineAnalysis: true,
    });

    // Mock padr√£o para LocationService
    (LocationService.getCurrentLocation as jest.Mock).mockResolvedValue({
      latitude: -23.5505,
      longitude: -46.6333,
      accuracy: 10,
    });
  });

  it('deve renderizar corretamente', () => {
    const { getByText, getByTestId } = render(
      <CameraView onObjectDetected={mockOnObjectDetected} onClose={mockOnClose} />
    );

    expect(getByText('Centralize o casar√£o na √°rea')).toBeTruthy();
    expect(getByText('Tirar Foto')).toBeTruthy();
    expect(getByText('Galeria')).toBeTruthy();
  });

  it('deve mostrar status de localiza√ß√£o', () => {
    const { getByText } = render(
      <CameraView onObjectDetected={mockOnObjectDetected} onClose={mockOnClose} />
    );

    expect(getByText('üìç Localiza√ß√£o: Carregando...')).toBeTruthy();
  });

  it('deve mostrar √°rea hist√≥rica quando detectada', async () => {
    (LocationService.isInHistoricalArea as jest.Mock).mockReturnValue(true);

    const { getByText } = render(
      <CameraView onObjectDetected={mockOnObjectDetected} onClose={mockOnClose} />
    );

    await waitFor(() => {
      expect(getByText('üèõÔ∏è √Årea Hist√≥rica Detectada')).toBeTruthy();
    });
  });

  it('deve mostrar √°rea n√£o hist√≥rica quando n√£o detectada', async () => {
    (LocationService.isInHistoricalArea as jest.Mock).mockReturnValue(false);

    const { getByText } = render(
      <CameraView onObjectDetected={mockOnObjectDetected} onClose={mockOnClose} />
    );

    await waitFor(() => {
      expect(getByText('üè¢ √Årea Moderna')).toBeTruthy();
    });
  });

  it('deve abrir c√¢mera quando bot√£o "Tirar Foto" √© pressionado', async () => {
    const { getByText } = render(
      <CameraView onObjectDetected={mockOnObjectDetected} onClose={mockOnClose} />
    );

    const cameraButton = getByText('Tirar Foto');
    fireEvent.press(cameraButton);

    // Verificar se a fun√ß√£o de an√°lise foi chamada
    await waitFor(() => {
      expect(AIService.analyzeImage).toHaveBeenCalled();
    });
  });

  it('deve abrir galeria quando bot√£o "Galeria" √© pressionado', async () => {
    const { getByText } = render(
      <CameraView onObjectDetected={mockOnObjectDetected} onClose={mockOnClose} />
    );

    const galleryButton = getByText('Galeria');
    fireEvent.press(galleryButton);

    // Verificar se a fun√ß√£o de an√°lise foi chamada
    await waitFor(() => {
      expect(AIService.analyzeImage).toHaveBeenCalled();
    });
  });

  it('deve mostrar overlay de an√°lise durante processamento', async () => {
    // Mock para simular an√°lise lenta
    (AIService.analyzeImage as jest.Mock).mockImplementation(
      () => new Promise(resolve => setTimeout(resolve, 100))
    );

    const { getByText } = render(
      <CameraView onObjectDetected={mockOnObjectDetected} onClose={mockOnClose} />
    );

    const cameraButton = getByText('Tirar Foto');
    fireEvent.press(cameraButton);

    // Deve mostrar overlay de an√°lise
    expect(getByText('ü§ñ Analisando Imagem...')).toBeTruthy();
    expect(getByText('IA processando...')).toBeTruthy();
  });

  it('deve chamar onObjectDetected com resultado da an√°lise', async () => {
    const mockAnalysis = {
      labels: ['building', 'historic'],
      objects: ['house'],
      architecturalStyle: 'Colonial',
      buildingType: 'Casar√£o Hist√≥rico',
      estimatedYear: 1750,
      confidence: 90,
      description: 'Casar√£o hist√≥rico detectado!',
      isHistoricalBuilding: true,
      buildingCategory: 'historical',
      historicalValue: 'Alto',
      recommendations: ['Documente a fachada'],
      isOfflineAnalysis: true,
    };

    (AIService.analyzeImage as jest.Mock).mockResolvedValue(mockAnalysis);

    const { getByText } = render(
      <CameraView onObjectDetected={mockOnObjectDetected} onClose={mockOnClose} />
    );

    const cameraButton = getByText('Tirar Foto');
    fireEvent.press(cameraButton);

    await waitFor(() => {
      expect(mockOnObjectDetected).toHaveBeenCalledWith(
        expect.objectContaining({
          name: expect.any(String),
          description: expect.any(String),
        }),
        mockAnalysis,
        expect.objectContaining({
          latitude: -23.5505,
          longitude: -46.6333,
        })
      );
    });
  });

  it('deve lidar com erro na an√°lise de imagem', async () => {
    (AIService.analyzeImage as jest.Mock).mockRejectedValue(new Error('Analysis error'));

    const { getByText } = render(
      <CameraView onObjectDetected={mockOnObjectDetected} onClose={mockOnClose} />
    );

    const cameraButton = getByText('Tirar Foto');
    fireEvent.press(cameraButton);

    // Deve lidar com erro graciosamente
    await waitFor(() => {
      expect(mockOnObjectDetected).not.toHaveBeenCalled();
    });
  });

  it('deve lidar com erro na obten√ß√£o de localiza√ß√£o', async () => {
    (LocationService.getCurrentLocation as jest.Mock).mockRejectedValue(
      new Error('Location error')
    );

    const { getByText } = render(
      <CameraView onObjectDetected={mockOnObjectDetected} onClose={mockOnClose} />
    );

    // Deve mostrar mensagem de erro de localiza√ß√£o
    await waitFor(() => {
      expect(getByText('üìç Localiza√ß√£o: Erro ao obter localiza√ß√£o')).toBeTruthy();
    });
  });

  it('deve mostrar informa√ß√µes de localiza√ß√£o quando dispon√≠vel', async () => {
    const mockLocation = {
      latitude: -23.5505,
      longitude: -46.6333,
      address: 'Rua das Flores, 123',
      city: 'S√£o Paulo',
      state: 'SP',
      country: 'Brasil',
    };

    (LocationService.getAddressFromCoordinates as jest.Mock).mockResolvedValue(mockLocation);

    const { getByText } = render(
      <CameraView onObjectDetected={mockOnObjectDetected} onClose={mockOnClose} />
    );

    await waitFor(() => {
      expect(getByText('üìç Localiza√ß√£o: S√£o Paulo, SP')).toBeTruthy();
    });
  });

  it('deve mostrar bot√£o de ajuda', () => {
    const { getByText } = render(
      <CameraView onObjectDetected={mockOnObjectDetected} onClose={mockOnClose} />
    );

    expect(getByText('‚ùì Ajuda')).toBeTruthy();
  });

  it('deve mostrar frame de foco com estilo correto', () => {
    const { getByTestId } = render(
      <CameraView onObjectDetected={mockOnObjectDetected} onClose={mockOnClose} />
    );

    const focusFrame = getByTestId('focus-frame');
    expect(focusFrame).toBeTruthy();
  });

  it('deve mostrar texto de foco correto', () => {
    const { getByText } = render(
      <CameraView onObjectDetected={mockOnObjectDetected} onClose={mockOnClose} />
    );

    expect(getByText('Centralize o casar√£o na √°rea')).toBeTruthy();
  });

  it('deve ter bot√µes com estilos modernos', () => {
    const { getByText } = render(
      <CameraView onObjectDetected={mockOnObjectDetected} onClose={mockOnClose} />
    );

    const cameraButton = getByText('Tirar Foto');
    const galleryButton = getByText('Galeria');

    expect(cameraButton).toBeTruthy();
    expect(galleryButton).toBeTruthy();
  });

  it('deve mostrar indicador de modo offline quando aplic√°vel', async () => {
    const mockAnalysis = {
      ...(AIService.analyzeImage as jest.Mock).mock.results[0].value,
      isOfflineAnalysis: true,
    };

    (AIService.analyzeImage as jest.Mock).mockResolvedValue(mockAnalysis);

    const { getByText } = render(
      <CameraView onObjectDetected={mockOnObjectDetected} onClose={mockOnClose} />
    );

    const cameraButton = getByText('Tirar Foto');
    fireEvent.press(cameraButton);

    await waitFor(() => {
      expect(mockOnObjectDetected).toHaveBeenCalled();
    });
  });
});
