import React from 'react';
import { render, fireEvent, waitFor } from '@testing-library/react-native';
import App from '../../App';
import { AIService } from '../../services/AIService';
import { LocationService } from '../../services/LocationService';

// Mock dos servi√ßos
jest.mock('../../services/AIService');
jest.mock('../../services/LocationService');

describe('App Integration Tests', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Mock padr√£o para AIService
    (AIService.analyzeImage as jest.Mock).mockResolvedValue({
      labels: ['building', 'historic', 'colonial'],
      objects: ['house', 'mansion'],
      architecturalStyle: 'Colonial',
      buildingType: 'Casar√£o Hist√≥rico',
      estimatedYear: 1750,
      confidence: 95,
      description: 'üèõÔ∏è Casar√£o hist√≥rico detectado! Estilo arquitet√¥nico: Colonial.',
      isHistoricalBuilding: true,
      buildingCategory: 'historical',
      historicalValue: 'Alto',
      recommendations: [
        'Documente a fachada e detalhes arquitet√¥nicos',
        'Verifique se est√° listado como patrim√¥nio hist√≥rico',
        'Considere restaura√ß√£o preservando caracter√≠sticas originais',
      ],
      isOfflineAnalysis: true,
    });

    // Mock padr√£o para LocationService
    (LocationService.getCurrentLocation as jest.Mock).mockResolvedValue({
      latitude: -23.5505,
      longitude: -46.6333,
      accuracy: 10,
    });

    (LocationService.isInHistoricalArea as jest.Mock).mockReturnValue(true);
  });

  describe('Fluxo Completo de An√°lise', () => {
    it('deve executar fluxo completo de detec√ß√£o e an√°lise', async () => {
      const { getByText, queryByText } = render(<App />);

      // 1. Verificar estado inicial
      expect(getByText('üèõÔ∏è Patrio Visio Pro')).toBeTruthy();
      expect(getByText('Centralize o casar√£o na √°rea')).toBeTruthy();
      expect(queryByText('Informa√ß√µes do Casar√£o')).toBeNull();

      // 2. Simular captura de foto
      const cameraButton = getByText('Tirar Foto');
      fireEvent.press(cameraButton);

      // 3. Verificar overlay de an√°lise
      expect(getByText('ü§ñ Analisando Imagem...')).toBeTruthy();
      expect(getByText('IA processando...')).toBeTruthy();

      // 4. Aguardar an√°lise completa
      await waitFor(() => {
        expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
      });

      // 5. Verificar informa√ß√µes da an√°lise de IA
      expect(getByText('ü§ñ An√°lise de IA')).toBeTruthy();
      expect(getByText('üì± An√°lise Offline')).toBeTruthy();
      expect(getByText('üèõÔ∏è Casar√£o Hist√≥rico')).toBeTruthy();
      expect(getByText('95%')).toBeTruthy();

      // 6. Verificar detalhes da an√°lise
      expect(getByText('üèóÔ∏è Estilo:')).toBeTruthy();
      expect(getByText('Colonial')).toBeTruthy();
      expect(getByText('üèõÔ∏è Tipo:')).toBeTruthy();
      expect(getByText('Casar√£o Hist√≥rico')).toBeTruthy();
      expect(getByText('üìÖ Ano Estimado:')).toBeTruthy();
      expect(getByText('1750')).toBeTruthy();

      // 7. Verificar recomenda√ß√µes
      expect(getByText('üí° Recomenda√ß√µes:')).toBeTruthy();
      expect(getByText('‚Ä¢ Documente a fachada e detalhes arquitet√¥nicos')).toBeTruthy();

      // 8. Fechar BuildingInfo
      const closeButton = getByText('‚úï');
      fireEvent.press(closeButton);

      // 9. Verificar retorno ao estado inicial
      expect(queryByText('Informa√ß√µes do Casar√£o')).toBeNull();
      expect(getByText('Centralize o casar√£o na √°rea')).toBeTruthy();
    });

    it('deve executar fluxo com galeria', async () => {
      const { getByText, queryByText } = render(<App />);

      // 1. Verificar estado inicial
      expect(queryByText('Informa√ß√µes do Casar√£o')).toBeNull();

      // 2. Simular sele√ß√£o da galeria
      const galleryButton = getByText('Galeria');
      fireEvent.press(galleryButton);

      // 3. Aguardar an√°lise
      await waitFor(() => {
        expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
      });

      // 4. Verificar BuildingInfo aberto
      expect(getByText('ü§ñ An√°lise de IA')).toBeTruthy();
      expect(getByText('üèõÔ∏è Casar√£o Hist√≥rico')).toBeTruthy();
    });

    it('deve executar m√∫ltiplas an√°lises sequenciais', async () => {
      const { getByText, queryByText } = render(<App />);

      // Primeira an√°lise
      const cameraButton = getByText('Tirar Foto');
      fireEvent.press(cameraButton);

      await waitFor(() => {
        expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
      });

      // Fechar primeira an√°lise
      const closeButton = getByText('‚úï');
      fireEvent.press(closeButton);

      expect(queryByText('Informa√ß√µes do Casar√£o')).toBeNull();

      // Segunda an√°lise
      fireEvent.press(cameraButton);

      await waitFor(() => {
        expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
      });

      // Verificar se segunda an√°lise funcionou
      expect(getByText('ü§ñ An√°lise de IA')).toBeTruthy();
      expect(getByText('üèõÔ∏è Casar√£o Hist√≥rico')).toBeTruthy();
    });
  });

  describe('Integra√ß√£o com Servi√ßos', () => {
    it('deve integrar corretamente com AIService', async () => {
      const { getByText } = render(<App />);

      const cameraButton = getByText('Tirar Foto');
      fireEvent.press(cameraButton);

      await waitFor(() => {
        expect(AIService.analyzeImage).toHaveBeenCalledTimes(1);
      });

      expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
    });

    it('deve integrar corretamente com LocationService', async () => {
      const { getByText } = render(<App />);

      // Verificar se LocationService foi chamado
      await waitFor(() => {
        expect(LocationService.getCurrentLocation).toHaveBeenCalled();
      });

      // Verificar se √°rea hist√≥rica foi detectada
      expect(getByText('üèõÔ∏è √Årea Hist√≥rica Detectada')).toBeTruthy();
    });

    it('deve lidar com erro no AIService graciosamente', async () => {
      (AIService.analyzeImage as jest.Mock).mockRejectedValue(new Error('AI Service Error'));

      const { getByText, queryByText } = render(<App />);

      const cameraButton = getByText('Tirar Foto');
      fireEvent.press(cameraButton);

      // Deve lidar com erro sem quebrar
      await waitFor(() => {
        expect(queryByText('Informa√ß√µes do Casar√£o')).toBeNull();
      });

      // Deve manter interface funcional
      expect(getByText('Centralize o casar√£o na √°rea')).toBeTruthy();
    });

    it('deve lidar com erro no LocationService graciosamente', async () => {
      (LocationService.getCurrentLocation as jest.Mock).mockRejectedValue(
        new Error('Location Service Error')
      );

      const { getByText } = render(<App />);

      // Deve lidar com erro de localiza√ß√£o
      await waitFor(() => {
        expect(getByText('üìç Localiza√ß√£o: Erro ao obter localiza√ß√£o')).toBeTruthy();
      });

      // Deve manter funcionalidade da c√¢mera
      expect(getByText('Tirar Foto')).toBeTruthy();
      expect(getByText('Galeria')).toBeTruthy();
    });
  });

  describe('Estados da Interface', () => {
    it('deve mostrar estado de carregamento durante an√°lise', async () => {
      // Mock para simular an√°lise lenta
      (AIService.analyzeImage as jest.Mock).mockImplementation(
        () => new Promise(resolve => setTimeout(resolve, 100))
      );

      const { getByText } = render(<App />);

      const cameraButton = getByText('Tirar Foto');
      fireEvent.press(cameraButton);

      // Deve mostrar overlay de an√°lise
      expect(getByText('ü§ñ Analisando Imagem...')).toBeTruthy();
      expect(getByText('IA processando...')).toBeTruthy();
    });

    it('deve alternar entre estados de c√¢mera e BuildingInfo', async () => {
      const { getByText, queryByText } = render(<App />);

      // Estado inicial: c√¢mera
      expect(getByText('Centralize o casar√£o na √°rea')).toBeTruthy();
      expect(queryByText('Informa√ß√µes do Casar√£o')).toBeNull();

      // Abrir BuildingInfo
      const cameraButton = getByText('Tirar Foto');
      fireEvent.press(cameraButton);

      await waitFor(() => {
        expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
      });

      // Fechar BuildingInfo
      const closeButton = getByText('‚úï');
      fireEvent.press(closeButton);

      // Voltar ao estado da c√¢mera
      expect(queryByText('Informa√ß√µes do Casar√£o')).toBeNull();
      expect(getByText('Centralize o casar√£o na √°rea')).toBeTruthy();
    });
  });

  describe('Funcionalidades Offline', () => {
    it('deve funcionar completamente offline', async () => {
      const { getByText } = render(<App />);

      // Verificar se funciona sem internet
      const cameraButton = getByText('Tirar Foto');
      fireEvent.press(cameraButton);

      await waitFor(() => {
        expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
      });

      // Verificar an√°lise offline
      expect(getByText('üì± An√°lise Offline')).toBeTruthy();
      expect(getByText('Funcionando sem internet - IA local inteligente')).toBeTruthy();
    });

    it('deve mostrar status offline corretamente', async () => {
      const { getByText } = render(<App />);

      const cameraButton = getByText('Tirar Foto');
      fireEvent.press(cameraButton);

      await waitFor(() => {
        expect(getByText('üì± An√°lise Offline')).toBeTruthy();
      });
    });
  });

  describe('Responsividade e Performance', () => {
    it('deve responder rapidamente a intera√ß√µes do usu√°rio', async () => {
      const startTime = Date.now();
      
      const { getByText } = render(<App />);
      
      const cameraButton = getByText('Tirar Foto');
      fireEvent.press(cameraButton);

      await waitFor(() => {
        expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
      });

      const endTime = Date.now();
      const responseTime = endTime - startTime;

      // Deve responder em menos de 1 segundo
      expect(responseTime).toBeLessThan(1000);
    });

    it('deve manter estado consistente durante intera√ß√µes', async () => {
      const { getByText, queryByText } = render(<App />);

      // M√∫ltiplas intera√ß√µes
      for (let i = 0; i < 3; i++) {
        const cameraButton = getByText('Tirar Foto');
        fireEvent.press(cameraButton);

        await waitFor(() => {
          expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
        });

        const closeButton = getByText('‚úï');
        fireEvent.press(closeButton);

        expect(queryByText('Informa√ß√µes do Casar√£o')).toBeNull();
      }

      // Estado final deve ser consistente
      expect(getByText('Centralize o casar√£o na √°rea')).toBeTruthy();
    });
  });
});
