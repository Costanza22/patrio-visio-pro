import React from 'react';
import { render, fireEvent, waitFor } from '@testing-library/react-native';
import App from '../App';
import { AIService } from '../services/AIService';
import { LocationService } from '../services/LocationService';

// Mock dos servi√ßos
jest.mock('../services/AIService');
jest.mock('../services/LocationService');

describe('App', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Mock padr√£o para AIService
    (AIService.analyzeImage as jest.Mock).mockResolvedValue({
      labels: ['building', 'historic'],
      objects: ['house'],
      architecturalStyle: 'Colonial',
      buildingType: 'Casar√£o Hist√≥rico',
      estimatedYear: 1750,
      confidence: 90,
      description: 'Casar√£o hist√≥rico detectado!',
      isHistoricalBuilding: true,
      buildingCategory: 'historical',
      historicalValue: 'Alto',
      recommendations: ['Documente a fachada'],
      isOfflineAnalysis: true,
    });

    // Mock padr√£o para LocationService
    (LocationService.getCurrentLocation as jest.Mock).mockResolvedValue({
      latitude: -23.5505,
      longitude: -46.6333,
      accuracy: 10,
    });
  });

  it('deve renderizar corretamente', () => {
    const { getByText } = render(<App />);

    expect(getByText('üèõÔ∏è Patrio Visio Pro')).toBeTruthy();
    expect(getByText('IA para Reconhecimento de Casar√µes Hist√≥ricos')).toBeTruthy();
  });

  it('deve mostrar CameraView por padr√£o', () => {
    const { getByText } = render(<App />);

    expect(getByText('Centralize o casar√£o na √°rea')).toBeTruthy();
    expect(getByText('Tirar Foto')).toBeTruthy();
    expect(getByText('Galeria')).toBeTruthy();
  });

  it('deve mostrar BuildingInfo quando objeto √© detectado', async () => {
    const { getByText, queryByText } = render(<App />);

    // Inicialmente n√£o deve mostrar BuildingInfo
    expect(queryByText('Informa√ß√µes do Casar√£o')).toBeNull();

    // Simular detec√ß√£o de objeto
    const cameraButton = getByText('Tirar Foto');
    fireEvent.press(cameraButton);

    // Aguardar an√°lise e exibi√ß√£o do BuildingInfo
    await waitFor(() => {
      expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
    });
  });

  it('deve fechar BuildingInfo quando onClose √© chamado', async () => {
    const { getByText, queryByText } = render(<App />);

    // Abrir BuildingInfo
    const cameraButton = getByText('Tirar Foto');
    fireEvent.press(cameraButton);

    await waitFor(() => {
      expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
    });

    // Fechar BuildingInfo
    const closeButton = getByText('‚úï');
    fireEvent.press(closeButton);

    // BuildingInfo deve desaparecer
    expect(queryByText('Informa√ß√µes do Casar√£o')).toBeNull();
  });

  it('deve passar dados corretos para BuildingInfo', async () => {
    const { getByText } = render(<App />);

    const cameraButton = getByText('Tirar Foto');
    fireEvent.press(cameraButton);

    await waitFor(() => {
      expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
      expect(getByText('ü§ñ An√°lise de IA')).toBeTruthy();
      expect(getByText('üì± An√°lise Offline')).toBeTruthy();
    });
  });

  it('deve lidar com erro na an√°lise de IA', async () => {
    (AIService.analyzeImage as jest.Mock).mockRejectedValue(new Error('Analysis error'));

    const { getByText } = render(<App />);

    const cameraButton = getByText('Tirar Foto');
    fireEvent.press(cameraButton);

    // Deve lidar com erro graciosamente sem quebrar
    await waitFor(() => {
      expect(getByText('Centralize o casar√£o na √°rea')).toBeTruthy();
    });
  });

  it('deve lidar com erro na obten√ß√£o de localiza√ß√£o', async () => {
    (LocationService.getCurrentLocation as jest.Mock).mockRejectedValue(
      new Error('Location error')
    );

    const { getByText } = render(<App />);

    // Deve lidar com erro de localiza√ß√£o graciosamente
    await waitFor(() => {
      expect(getByText('Centralize o casar√£o na √°rea')).toBeTruthy();
    });
  });

  it('deve mostrar status de localiza√ß√£o', async () => {
    const { getByText } = render(<App />);

    // Deve mostrar status de localiza√ß√£o
    expect(getByText('üìç Localiza√ß√£o: Carregando...')).toBeTruthy();
  });

  it('deve mostrar √°rea hist√≥rica quando detectada', async () => {
    (LocationService.isInHistoricalArea as jest.Mock).mockReturnValue(true);

    const { getByText } = render(<App />);

    await waitFor(() => {
      expect(getByText('üèõÔ∏è √Årea Hist√≥rica Detectada')).toBeTruthy();
    });
  });

  it('deve mostrar √°rea n√£o hist√≥rica quando n√£o detectada', async () => {
    (LocationService.isInHistoricalArea as jest.Mock).mockReturnValue(false);

    const { getByText } = render(<App />);

    await waitFor(() => {
      expect(getByText('üè¢ √Årea Moderna')).toBeTruthy();
    });
  });

  it('deve manter estado entre aberturas de BuildingInfo', async () => {
    const { getByText, queryByText } = render(<App />);

    // Primeira detec√ß√£o
    const cameraButton = getByText('Tirar Foto');
    fireEvent.press(cameraButton);

    await waitFor(() => {
      expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
    });

    // Fechar
    const closeButton = getByText('‚úï');
    fireEvent.press(closeButton);

    expect(queryByText('Informa√ß√µes do Casar√£o')).toBeNull();

    // Segunda detec√ß√£o (deve funcionar normalmente)
    fireEvent.press(cameraButton);

    await waitFor(() => {
      expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
    });
  });

  it('deve mostrar informa√ß√µes de an√°lise offline', async () => {
    const { getByText } = render(<App />);

    const cameraButton = getByText('Tirar Foto');
    fireEvent.press(cameraButton);

    await waitFor(() => {
      expect(getByText('üì± An√°lise Offline')).toBeTruthy();
      expect(getByText('Funcionando sem internet - IA local inteligente')).toBeTruthy();
    });
  });

  it('deve mostrar informa√ß√µes de an√°lise online quando aplic√°vel', async () => {
    const onlineAnalysis = {
      labels: ['building', 'historic'],
      objects: ['house'],
      architecturalStyle: 'Colonial',
      buildingType: 'Casar√£o Hist√≥rico',
      estimatedYear: 1750,
      confidence: 90,
      description: 'Casar√£o hist√≥rico detectado!',
      isHistoricalBuilding: true,
      buildingCategory: 'historical',
      historicalValue: 'Alto',
      recommendations: ['Documente a fachada'],
      isOfflineAnalysis: false,
    };

    (AIService.analyzeImage as jest.Mock).mockResolvedValue(onlineAnalysis);

    const { getByText } = render(<App />);

    const cameraButton = getByText('Tirar Foto');
    fireEvent.press(cameraButton);

    await waitFor(() => {
      expect(getByText('üåê An√°lise Online')).toBeTruthy();
    });
  });

  it('deve mostrar placeholder quando c√¢mera est√° pausada', async () => {
    const { getByText } = render(<App />);

    // Simular pausa da c√¢mera
    const cameraButton = getByText('Tirar Foto');
    fireEvent.press(cameraButton);

    await waitFor(() => {
      expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
    });

    // Fechar BuildingInfo para voltar ao placeholder
    const closeButton = getByText('‚úï');
    fireEvent.press(closeButton);

    // Deve mostrar placeholder
    expect(getByText('Centralize o casar√£o na √°rea')).toBeTruthy();
  });

  it('deve ter header com estilo correto', () => {
    const { getByText } = render(<App />);

    const header = getByText('üèõÔ∏è Patrio Visio Pro');
    const subtitle = getByText('IA para Reconhecimento de Casar√µes Hist√≥ricos');

    expect(header).toBeTruthy();
    expect(subtitle).toBeTruthy();
  });

  it('deve ter StatusBar configurado corretamente', () => {
    const { getByTestId } = render(<App />);

    // Verificar se StatusBar est√° presente
    expect(getByTestId('status-bar')).toBeTruthy();
  });

  it('deve lidar com m√∫ltiplas detec√ß√µes sequenciais', async () => {
    const { getByText, queryByText } = render(<App />);

    // Primeira detec√ß√£o
    let cameraButton = getByText('Tirar Foto');
    fireEvent.press(cameraButton);

    await waitFor(() => {
      expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
    });

    // Fechar primeira detec√ß√£o
    let closeButton = getByText('‚úï');
    fireEvent.press(closeButton);

    expect(queryByText('Informa√ß√µes do Casar√£o')).toBeNull();

    // Segunda detec√ß√£o
    cameraButton = getByText('Tirar Foto');
    fireEvent.press(cameraButton);

    await waitFor(() => {
      expect(getByText('Informa√ß√µes do Casar√£o')).toBeTruthy();
    });

    // Fechar segunda detec√ß√£o
    closeButton = getByText('‚úï');
    fireEvent.press(closeButton);

    expect(queryByText('Informa√ß√µes do Casar√£o')).toBeNull();
  });

  it('deve mostrar informa√ß√µes de localiza√ß√£o quando dispon√≠veis', async () => {
    const mockLocation = {
      latitude: -23.5505,
      longitude: -46.6333,
      address: 'Rua das Flores, 123',
      city: 'S√£o Paulo',
      state: 'SP',
      country: 'Brasil',
    };

    (LocationService.getAddressFromCoordinates as jest.Mock).mockResolvedValue(mockLocation);

    const { getByText } = render(<App />);

    await waitFor(() => {
      expect(getByText('üìç Localiza√ß√£o: S√£o Paulo, SP')).toBeTruthy();
    });
  });

  it('deve ter layout responsivo', () => {
    const { getByTestId } = render(<App />);

    const container = getByTestId('app-container');
    expect(container).toBeTruthy();
  });
});
